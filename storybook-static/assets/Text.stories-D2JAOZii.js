import{j as d}from"./jsx-runtime-DwRxq3ZX.js";import{c}from"./clsx-B-dksMZM.js";/* empty css              */import"./index-BX3iQpgp.js";const h={display:["bold","semi-bold","extra-bold"],h1:["bold","semi-bold","extra-bold"],h2:["bold","semi-bold","extra-bold"],h3:["bold","semi-bold","extra-bold"],h4:["bold","semi-bold","extra-bold"],subheading:["light","medium","semi-bold","bold","extra-bold","underlined"],p1:["light","medium","bold","underlined"],p2:["light","medium","bold","underlined"],p3:["light","medium","bold","underlined"],caption:["light","medium","bold","underlined","bold-underlined"],footer:["light","medium","bold","underlined","bold-underlined"]},a=({size:e,weight:l,display:i="block",className:m,children:u})=>{var n;const b=c(`text-${e}-${l}`,m),p=i==="inline"?"span":"div";return(n=h[e])!=null&&n.includes(l)||console.warn(`Invalid combination of size "${e}" and weight "${l}".`),d.jsx(p,{className:b,children:u})};a.__docgenInfo={description:"",methods:[],displayName:"Text",props:{size:{required:!0,tsType:{name:"union",raw:"keyof typeof sizeToWeights",elements:[{name:"literal",value:"display"},{name:"literal",value:"h1"},{name:"literal",value:"h2"},{name:"literal",value:"h3"},{name:"literal",value:"h4"},{name:"literal",value:"subheading"},{name:"literal",value:"p1"},{name:"literal",value:"p2"},{name:"literal",value:"p3"},{name:"literal",value:"caption"},{name:"literal",value:"footer"}]},description:""},weight:{required:!0,tsType:{name:"sizeToWeights[union][number]",raw:"typeof sizeToWeights[Size][number]"},description:""},display:{required:!1,tsType:{name:"union",raw:"'block' | 'inline'",elements:[{name:"literal",value:"'block'"},{name:"literal",value:"'inline'"}]},description:"",defaultValue:{value:"'block'",computed:!1}},className:{required:!1,tsType:{name:"string"},description:""},children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}};const y={title:"Elements/Text",component:a},x={display:["bold","semi-bold","extra-bold"],h1:["bold","semi-bold","extra-bold"],h2:["bold","semi-bold","extra-bold"],h3:["bold","semi-bold","extra-bold"],h4:["bold","semi-bold","extra-bold"],subheading:["light","medium","semi-bold","bold","extra-bold","underlined"],p1:["light","medium","bold","underlined"],p2:["light","medium","bold","underlined"],p3:["light","medium","bold","underlined"],caption:["light","medium","bold","underlined","bold-underlined"],footer:["light","medium","bold","underlined","bold-underlined"]},t=()=>d.jsx("div",{className:"text-neutral-2700",children:Object.entries(x).map(([e,l])=>l.map(i=>d.jsxs(a,{size:e,weight:i,children:[`text-${e}-${i}`,d.jsxs("span",{className:"text-neutral-100",children:[" ","The quick brown fox jumps over the lazy dog."]})]},`${e}-${i}`)))});t.__docgenInfo={description:"",methods:[],displayName:"AllVariants"};var o,s,r;t.parameters={...t.parameters,docs:{...(o=t.parameters)==null?void 0:o.docs,source:{originalSource:`() => {
  return <div className="text-neutral-2700">
      {Object.entries(sizeToWeights).map(([size, weights]) => weights.map(weight => <Text key={\`\${size}-\${weight}\`} size={size as Size} weight={weight as Weight}>
            {\`text-\${size}-\${weight}\`}
            <span className="text-neutral-100">
              {' '}
              The quick brown fox jumps over the lazy dog.
            </span>
          </Text>))}
    </div>;
}`,...(r=(s=t.parameters)==null?void 0:s.docs)==null?void 0:r.source}}};const z=["AllVariants"];export{t as AllVariants,z as __namedExportsOrder,y as default};
